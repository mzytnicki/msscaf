// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// parseBamFileCpp
DataFrame parseBamFileCpp(String fileName, int32_t binSize);
RcppExport SEXP _msscaf_parseBamFileCpp(SEXP fileNameSEXP, SEXP binSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< int32_t >::type binSize(binSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(parseBamFileCpp(fileName, binSize));
    return rcpp_result_gen;
END_RCPP
}
// computeCornerSize
int computeCornerSize(int size1, int size2, int maxDistance);
RcppExport SEXP _msscaf_computeCornerSize(SEXP size1SEXP, SEXP size2SEXP, SEXP maxDistanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size1(size1SEXP);
    Rcpp::traits::input_parameter< int >::type size2(size2SEXP);
    Rcpp::traits::input_parameter< int >::type maxDistance(maxDistanceSEXP);
    rcpp_result_gen = Rcpp::wrap(computeCornerSize(size1, size2, maxDistance));
    return rcpp_result_gen;
END_RCPP
}
// filterCornersCpp
DataFrame filterCornersCpp(DataFrame data, IntegerVector sizesIn, int cornerSize, int metaSize);
RcppExport SEXP _msscaf_filterCornersCpp(SEXP dataSEXP, SEXP sizesInSEXP, SEXP cornerSizeSEXP, SEXP metaSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sizesIn(sizesInSEXP);
    Rcpp::traits::input_parameter< int >::type cornerSize(cornerSizeSEXP);
    Rcpp::traits::input_parameter< int >::type metaSize(metaSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(filterCornersCpp(data, sizesIn, cornerSize, metaSize));
    return rcpp_result_gen;
END_RCPP
}
// sumCornerCpp
DataFrame sumCornerCpp(DataFrame interactions, IntegerVector sizes, int cornerSize, int metaSize);
RcppExport SEXP _msscaf_sumCornerCpp(SEXP interactionsSEXP, SEXP sizesSEXP, SEXP cornerSizeSEXP, SEXP metaSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type interactions(interactionsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< int >::type cornerSize(cornerSizeSEXP);
    Rcpp::traits::input_parameter< int >::type metaSize(metaSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sumCornerCpp(interactions, sizes, cornerSize, metaSize));
    return rcpp_result_gen;
END_RCPP
}
// extractCornersCpp
DataFrame extractCornersCpp(DataFrame interactions, DataFrame selectedRefs, IntegerVector sizes, int cornerSize, int metaSize);
RcppExport SEXP _msscaf_extractCornersCpp(SEXP interactionsSEXP, SEXP selectedRefsSEXP, SEXP sizesSEXP, SEXP cornerSizeSEXP, SEXP metaSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type interactions(interactionsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type selectedRefs(selectedRefsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< int >::type cornerSize(cornerSizeSEXP);
    Rcpp::traits::input_parameter< int >::type metaSize(metaSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(extractCornersCpp(interactions, selectedRefs, sizes, cornerSize, metaSize));
    return rcpp_result_gen;
END_RCPP
}
// classifyCornerPointsCpp
DataFrame classifyCornerPointsCpp(DataFrame interactions, int size1, int size2, int metaSize, int maxDistance);
RcppExport SEXP _msscaf_classifyCornerPointsCpp(SEXP interactionsSEXP, SEXP size1SEXP, SEXP size2SEXP, SEXP metaSizeSEXP, SEXP maxDistanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type interactions(interactionsSEXP);
    Rcpp::traits::input_parameter< int >::type size1(size1SEXP);
    Rcpp::traits::input_parameter< int >::type size2(size2SEXP);
    Rcpp::traits::input_parameter< int >::type metaSize(metaSizeSEXP);
    Rcpp::traits::input_parameter< int >::type maxDistance(maxDistanceSEXP);
    rcpp_result_gen = Rcpp::wrap(classifyCornerPointsCpp(interactions, size1, size2, metaSize, maxDistance));
    return rcpp_result_gen;
END_RCPP
}
// extractCornersFullCpp
DataFrame extractCornersFullCpp(DataFrame interactions, DataFrame selectedCorners, IntegerVector sizesIn, int cornerSize, int metaSize);
RcppExport SEXP _msscaf_extractCornersFullCpp(SEXP interactionsSEXP, SEXP selectedCornersSEXP, SEXP sizesInSEXP, SEXP cornerSizeSEXP, SEXP metaSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type interactions(interactionsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type selectedCorners(selectedCornersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sizesIn(sizesInSEXP);
    Rcpp::traits::input_parameter< int >::type cornerSize(cornerSizeSEXP);
    Rcpp::traits::input_parameter< int >::type metaSize(metaSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(extractCornersFullCpp(interactions, selectedCorners, sizesIn, cornerSize, metaSize));
    return rcpp_result_gen;
END_RCPP
}
// splitChromosomeCpp
void splitChromosomeCpp(DataFrame& data, int prevRef, int newRef, int shiftedRef, long splitPoint, bool firstPart);
RcppExport SEXP _msscaf_splitChromosomeCpp(SEXP dataSEXP, SEXP prevRefSEXP, SEXP newRefSEXP, SEXP shiftedRefSEXP, SEXP splitPointSEXP, SEXP firstPartSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type prevRef(prevRefSEXP);
    Rcpp::traits::input_parameter< int >::type newRef(newRefSEXP);
    Rcpp::traits::input_parameter< int >::type shiftedRef(shiftedRefSEXP);
    Rcpp::traits::input_parameter< long >::type splitPoint(splitPointSEXP);
    Rcpp::traits::input_parameter< bool >::type firstPart(firstPartSEXP);
    splitChromosomeCpp(data, prevRef, newRef, shiftedRef, splitPoint, firstPart);
    return R_NilValue;
END_RCPP
}
// computeRefSizesCpp
IntegerVector computeRefSizesCpp(DataFrame& data);
RcppExport SEXP _msscaf_computeRefSizesCpp(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(computeRefSizesCpp(data));
    return rcpp_result_gen;
END_RCPP
}
// computeNRrows
int computeNRrows(DataFrame& data, IntegerVector& sizes);
RcppExport SEXP _msscaf_computeNRrows(SEXP dataSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(computeNRrows(data, sizes));
    return rcpp_result_gen;
END_RCPP
}
// computeSymmetricColSum
DataFrame computeSymmetricColSum(DataFrame& data, IntegerVector& sizes);
RcppExport SEXP _msscaf_computeSymmetricColSum(SEXP dataSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSymmetricColSum(data, sizes));
    return rcpp_result_gen;
END_RCPP
}
// computeSymmetricColSumMeta
DataFrame computeSymmetricColSumMeta(DataFrame& data, IntegerVector& sizes, int metaSize);
RcppExport SEXP _msscaf_computeSymmetricColSumMeta(SEXP dataSEXP, SEXP sizesSEXP, SEXP metaSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< int >::type metaSize(metaSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSymmetricColSumMeta(data, sizes, metaSize));
    return rcpp_result_gen;
END_RCPP
}
// removeLowCountRowsCpp
List removeLowCountRowsCpp(DataFrame& data, IntegerVector& sizes, int threshold);
RcppExport SEXP _msscaf_removeLowCountRowsCpp(SEXP dataSEXP, SEXP sizesSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(removeLowCountRowsCpp(data, sizes, threshold));
    return rcpp_result_gen;
END_RCPP
}
// normalizeHighCountRowsCpp
void normalizeHighCountRowsCpp(DataFrame& data, IntegerVector& sizes);
RcppExport SEXP _msscaf_normalizeHighCountRowsCpp(SEXP dataSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type sizes(sizesSEXP);
    normalizeHighCountRowsCpp(data, sizes);
    return R_NilValue;
END_RCPP
}
// parseHicCpp
List parseHicCpp(std::string& fname, int resolution);
RcppExport SEXP _msscaf_parseHicCpp(SEXP fnameSEXP, SEXP resolutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type fname(fnameSEXP);
    Rcpp::traits::input_parameter< int >::type resolution(resolutionSEXP);
    rcpp_result_gen = Rcpp::wrap(parseHicCpp(fname, resolution));
    return rcpp_result_gen;
END_RCPP
}
// parsePafCpp
DataFrame parsePafCpp(std::string& fname, uint32_t resolution, int minAlnLen, int minCount, int minNCells);
RcppExport SEXP _msscaf_parsePafCpp(SEXP fnameSEXP, SEXP resolutionSEXP, SEXP minAlnLenSEXP, SEXP minCountSEXP, SEXP minNCellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type fname(fnameSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< int >::type minAlnLen(minAlnLenSEXP);
    Rcpp::traits::input_parameter< int >::type minCount(minCountSEXP);
    Rcpp::traits::input_parameter< int >::type minNCells(minNCellsSEXP);
    rcpp_result_gen = Rcpp::wrap(parsePafCpp(fname, resolution, minAlnLen, minCount, minNCells));
    return rcpp_result_gen;
END_RCPP
}
// getRefOrders
List getRefOrders(DataFrame& joins, IntegerVector sizes);
RcppExport SEXP _msscaf_getRefOrders(SEXP joinsSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type joins(joinsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(getRefOrders(joins, sizes));
    return rcpp_result_gen;
END_RCPP
}
// scaffoldSizes
IntegerVector scaffoldSizes(List orders, IntegerVector orderIds, IntegerVector sizes);
RcppExport SEXP _msscaf_scaffoldSizes(SEXP ordersSEXP, SEXP orderIdsSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type orders(ordersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type orderIds(orderIdsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(scaffoldSizes(orders, orderIds, sizes));
    return rcpp_result_gen;
END_RCPP
}
// scaffoldContigs
CharacterVector scaffoldContigs(CharacterVector contigs, List orders, IntegerVector sizes, int binSize);
RcppExport SEXP _msscaf_scaffoldContigs(SEXP contigsSEXP, SEXP ordersSEXP, SEXP sizesSEXP, SEXP binSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type contigs(contigsSEXP);
    Rcpp::traits::input_parameter< List >::type orders(ordersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< int >::type binSize(binSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(scaffoldContigs(contigs, orders, sizes, binSize));
    return rcpp_result_gen;
END_RCPP
}
// scaffoldCounts
List scaffoldCounts(DataFrame matrices, DataFrame outlierBins, List groups, IntegerVector scaffoldRefs, IntegerVector sizes, int metaSize);
RcppExport SEXP _msscaf_scaffoldCounts(SEXP matricesSEXP, SEXP outlierBinsSEXP, SEXP groupsSEXP, SEXP scaffoldRefsSEXP, SEXP sizesSEXP, SEXP metaSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type matrices(matricesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type outlierBins(outlierBinsSEXP);
    Rcpp::traits::input_parameter< List >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type scaffoldRefs(scaffoldRefsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< int >::type metaSize(metaSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(scaffoldCounts(matrices, outlierBins, groups, scaffoldRefs, sizes, metaSize));
    return rcpp_result_gen;
END_RCPP
}
// splitCpp
S4 splitCpp(S4 object);
RcppExport SEXP _msscaf_splitCpp(SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type object(objectSEXP);
    rcpp_result_gen = Rcpp::wrap(splitCpp(object));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_msscaf_parseBamFileCpp", (DL_FUNC) &_msscaf_parseBamFileCpp, 2},
    {"_msscaf_computeCornerSize", (DL_FUNC) &_msscaf_computeCornerSize, 3},
    {"_msscaf_filterCornersCpp", (DL_FUNC) &_msscaf_filterCornersCpp, 4},
    {"_msscaf_sumCornerCpp", (DL_FUNC) &_msscaf_sumCornerCpp, 4},
    {"_msscaf_extractCornersCpp", (DL_FUNC) &_msscaf_extractCornersCpp, 5},
    {"_msscaf_classifyCornerPointsCpp", (DL_FUNC) &_msscaf_classifyCornerPointsCpp, 5},
    {"_msscaf_extractCornersFullCpp", (DL_FUNC) &_msscaf_extractCornersFullCpp, 5},
    {"_msscaf_splitChromosomeCpp", (DL_FUNC) &_msscaf_splitChromosomeCpp, 6},
    {"_msscaf_computeRefSizesCpp", (DL_FUNC) &_msscaf_computeRefSizesCpp, 1},
    {"_msscaf_computeNRrows", (DL_FUNC) &_msscaf_computeNRrows, 2},
    {"_msscaf_computeSymmetricColSum", (DL_FUNC) &_msscaf_computeSymmetricColSum, 2},
    {"_msscaf_computeSymmetricColSumMeta", (DL_FUNC) &_msscaf_computeSymmetricColSumMeta, 3},
    {"_msscaf_removeLowCountRowsCpp", (DL_FUNC) &_msscaf_removeLowCountRowsCpp, 3},
    {"_msscaf_normalizeHighCountRowsCpp", (DL_FUNC) &_msscaf_normalizeHighCountRowsCpp, 2},
    {"_msscaf_parseHicCpp", (DL_FUNC) &_msscaf_parseHicCpp, 2},
    {"_msscaf_parsePafCpp", (DL_FUNC) &_msscaf_parsePafCpp, 5},
    {"_msscaf_getRefOrders", (DL_FUNC) &_msscaf_getRefOrders, 2},
    {"_msscaf_scaffoldSizes", (DL_FUNC) &_msscaf_scaffoldSizes, 3},
    {"_msscaf_scaffoldContigs", (DL_FUNC) &_msscaf_scaffoldContigs, 4},
    {"_msscaf_scaffoldCounts", (DL_FUNC) &_msscaf_scaffoldCounts, 6},
    {"_msscaf_splitCpp", (DL_FUNC) &_msscaf_splitCpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_msscaf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
