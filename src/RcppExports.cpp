// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// parseBamFileCpp
List parseBamFileCpp(String fileName, int32_t binSize);
RcppExport SEXP _tenxchecker_parseBamFileCpp(SEXP fileNameSEXP, SEXP binSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< int32_t >::type binSize(binSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(parseBamFileCpp(fileName, binSize));
    return rcpp_result_gen;
END_RCPP
}
// computeRefSizesCpp
IntegerVector computeRefSizesCpp(DataFrame& data);
RcppExport SEXP _tenxchecker_computeRefSizesCpp(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(computeRefSizesCpp(data));
    return rcpp_result_gen;
END_RCPP
}
// computeNRrows
int computeNRrows(DataFrame& data, IntegerVector& sizes);
RcppExport SEXP _tenxchecker_computeNRrows(SEXP dataSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(computeNRrows(data, sizes));
    return rcpp_result_gen;
END_RCPP
}
// computeSymmetricColSum
IntegerVector computeSymmetricColSum(DataFrame& data, IntegerVector& sizes);
RcppExport SEXP _tenxchecker_computeSymmetricColSum(SEXP dataSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSymmetricColSum(data, sizes));
    return rcpp_result_gen;
END_RCPP
}
// removeLowCountRowsCpp
DataFrame removeLowCountRowsCpp(DataFrame& data, IntegerVector& sizes, int threshold);
RcppExport SEXP _tenxchecker_removeLowCountRowsCpp(SEXP dataSEXP, SEXP sizesSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(removeLowCountRowsCpp(data, sizes, threshold));
    return rcpp_result_gen;
END_RCPP
}
// keepScaffoldsCpp
DataFrame keepScaffoldsCpp(DataFrame& data, CharacterVector keptRefs);
RcppExport SEXP _tenxchecker_keepScaffoldsCpp(SEXP dataSEXP, SEXP keptRefsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type keptRefs(keptRefsSEXP);
    rcpp_result_gen = Rcpp::wrap(keepScaffoldsCpp(data, keptRefs));
    return rcpp_result_gen;
END_RCPP
}
// computeMeanTrianglesCpp
DataFrame computeMeanTrianglesCpp(DataFrame& data);
RcppExport SEXP _tenxchecker_computeMeanTrianglesCpp(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMeanTrianglesCpp(data));
    return rcpp_result_gen;
END_RCPP
}
// parseHicCpp
List parseHicCpp(std::string& fname, int resolution);
RcppExport SEXP _tenxchecker_parseHicCpp(SEXP fnameSEXP, SEXP resolutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type fname(fnameSEXP);
    Rcpp::traits::input_parameter< int >::type resolution(resolutionSEXP);
    rcpp_result_gen = Rcpp::wrap(parseHicCpp(fname, resolution));
    return rcpp_result_gen;
END_RCPP
}
// parsePafCpp
List parsePafCpp(std::string& fname, uint32_t resolution, int minAlnLen, int minCount, int minNCells);
RcppExport SEXP _tenxchecker_parsePafCpp(SEXP fnameSEXP, SEXP resolutionSEXP, SEXP minAlnLenSEXP, SEXP minCountSEXP, SEXP minNCellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type fname(fnameSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< int >::type minAlnLen(minAlnLenSEXP);
    Rcpp::traits::input_parameter< int >::type minCount(minCountSEXP);
    Rcpp::traits::input_parameter< int >::type minNCells(minNCellsSEXP);
    rcpp_result_gen = Rcpp::wrap(parsePafCpp(fname, resolution, minAlnLen, minCount, minNCells));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tenxchecker_parseBamFileCpp", (DL_FUNC) &_tenxchecker_parseBamFileCpp, 2},
    {"_tenxchecker_computeRefSizesCpp", (DL_FUNC) &_tenxchecker_computeRefSizesCpp, 1},
    {"_tenxchecker_computeNRrows", (DL_FUNC) &_tenxchecker_computeNRrows, 2},
    {"_tenxchecker_computeSymmetricColSum", (DL_FUNC) &_tenxchecker_computeSymmetricColSum, 2},
    {"_tenxchecker_removeLowCountRowsCpp", (DL_FUNC) &_tenxchecker_removeLowCountRowsCpp, 3},
    {"_tenxchecker_keepScaffoldsCpp", (DL_FUNC) &_tenxchecker_keepScaffoldsCpp, 2},
    {"_tenxchecker_computeMeanTrianglesCpp", (DL_FUNC) &_tenxchecker_computeMeanTrianglesCpp, 1},
    {"_tenxchecker_parseHicCpp", (DL_FUNC) &_tenxchecker_parseHicCpp, 2},
    {"_tenxchecker_parsePafCpp", (DL_FUNC) &_tenxchecker_parsePafCpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_tenxchecker(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
